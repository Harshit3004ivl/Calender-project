#include <stdio.h>

// Function prototypes
int isLeapYear(int year);
int getDaysInMonth(int month, int year);
void displayCalendar(int year);
void displayMonth(int month, int year, int *startDay);

int main() {
    int year;

    printf("Enter year: ");
    scanf("%d", &year);

    displayCalendar(year);

    return 0;
}

// Check if the given year is a leap year
int isLeapYear(int year) {
    return (year % 4 == 0 && year % 100 != 0) || (year % 400 == 0);
}

// Get number of days in a specific month
int getDaysInMonth(int month, int year) {
    switch (month) {
        case 1: return 31; // January
        case 2: return isLeapYear(year) ? 29 : 28; // February
        case 3: return 31; // March
        case 4: return 30; // April
        case 5: return 31; // May
        case 6: return 30; // June
        case 7: return 31; // July
        case 8: return 31; // August
        case 9: return 30; // September
        case 10: return 31; // October
        case 11: return 30; // November
        case 12: return 31; // December
        default: return 0;
    }
}

// Display the calendar for the entire year
void displayCalendar(int year) {
    int month, startDay = 0;

    // Display each month
    for (month = 1; month <= 12; month++) {
        displayMonth(month, year, &startDay);
    }
}

// Display a single month in the calendar
void displayMonth(int month, int year, int *startDay) {
    const char *months[] = {
        "January", "February", "March", "April", "May", "June",
        "July", "August", "September", "October", "November", "December"
    };
    
    int daysInMonth = getDaysInMonth(month, year);
    int day, currentDay = *startDay;

    printf("\n\n  ------------%s %d------------\n", months[month - 1], year);
    printf("  Sun  Mon  Tue  Wed  Thu  Fri  Sat\n");

    // Print leading spaces for the first week
    for (day = 0; day < currentDay; day++) {
        printf("     ");
    }

    // Print days of the month
    for (day = 1; day <= daysInMonth; day++) {
        printf("%5d", day);

        if ((currentDay + day) % 7 == 0) {
            printf("\n");
        }
    }

    // Update start day for the next month
    *startDay = (currentDay + daysInMonth) % 7;
    printf("\n");
}
